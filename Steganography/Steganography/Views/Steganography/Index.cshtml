@model Steganography.Models.SteganographyViewModel
@{
    ViewData["Title"] = "Steganography Tool";

    // Set default active tab if not specified
    string encodeTabClass = "active";
    string decodeTabClass = "";
    string encodeTabSelected = "true";
    string decodeTabSelected = "false";
    string encodeTabPaneClass = "show active";
    string decodeTabPaneClass = "";

    // Check if a specific tab should be active
    if (ViewBag.ActiveTab == "decode")
    {
        encodeTabClass = "";
        decodeTabClass = "active";
        encodeTabSelected = "false";
        decodeTabSelected = "true";
        encodeTabPaneClass = "";
        decodeTabPaneClass = "show active";
    }
}

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow">
                <div class="card-header bg-primary text-white d-flex align-items-center">
                    <i class="bi bi-lock-fill fs-4 me-2"></i>
                    <h1 class="h3 mb-0">Image Steganography Tool</h1>
                </div>
                <div class="card-body">
                    <p class="lead mb-4">Hide text messages within images or extract hidden messages from images securely.</p>

                    <ul class="nav nav-tabs" id="steganographyTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @encodeTabClass" id="encode-tab" data-bs-toggle="tab" data-bs-target="#encode"
                                    type="button" role="tab" aria-controls="encode" aria-selected="@encodeTabSelected">
                                <i class="bi bi-lock-fill me-2"></i>Encode Message
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @decodeTabClass" id="decode-tab" data-bs-toggle="tab" data-bs-target="#decode"
                                    type="button" role="tab" aria-controls="decode" aria-selected="@decodeTabSelected">
                                <i class="bi bi-unlock-fill me-2"></i>Decode Message
                            </button>
                        </li>
                    </ul>

                    <div class="tab-content py-4" id="steganographyTabContent">
                        <!-- Encode Tab -->
                        <div class="tab-pane fade @encodeTabPaneClass" id="encode" role="tabpanel" aria-labelledby="encode-tab">
                            <form asp-action="Encode" asp-controller="Steganography" method="post" enctype="multipart/form-data">
                                <div class="mb-4">
                                    <label asp-for="ImageFile" class="form-label fw-bold">
                                        <i class="bi bi-image me-2 text-primary"></i>Select Image File
                                    </label>
                                    <div class="input-group">
                                        <input asp-for="ImageFile" class="form-control" type="file" accept=".jpg,.jpeg,.png,.bmp" required />
                                        <span class="input-group-text bg-light">
                                            <i class="bi bi-file-earmark-image"></i>
                                        </span>
                                    </div>
                                    <small class="text-muted">Supported formats: JPG, PNG, BMP</small>
                                </div>

                                <div class="mb-4">
                                    <label asp-for="Message" class="form-label fw-bold">
                                        <i class="bi bi-chat-square-text me-2 text-primary"></i>Message to Hide
                                    </label>
                                    <textarea asp-for="Message" class="form-control" rows="5"
                                              placeholder="Enter the text message you want to hide in the image" required></textarea>
                                    <div class="d-flex justify-content-between mt-1">
                                        <small class="text-muted">Your message will be securely hidden in the image</small>
                                        <small class="text-muted message-counter">0 characters</small>
                                    </div>
                                </div>

                                <div class="d-grid gap-2">
                                    <button type="submit" class="btn btn-primary btn-lg">
                                        <i class="bi bi-lock-fill me-2"></i>Encode Message
                                    </button>
                                </div>
                            </form>
                        </div>

                        <!-- Decode Tab -->
                        <div class="tab-pane fade @decodeTabPaneClass" id="decode" role="tabpanel" aria-labelledby="decode-tab">
                            <form asp-action="Decode" asp-controller="Steganography" method="post" enctype="multipart/form-data">
                                <div class="mb-4">
                                    <label asp-for="ImageFile" class="form-label fw-bold">
                                        <i class="bi bi-image me-2 text-primary"></i>Select Image with Hidden Message
                                    </label>
                                    <div class="input-group">
                                        <input asp-for="ImageFile" class="form-control" type="file" accept=".jpg,.jpeg,.png,.bmp" required />
                                        <span class="input-group-text bg-light">
                                            <i class="bi bi-file-earmark-image"></i>
                                        </span>
                                    </div>
                                    <small class="text-muted">Upload an image that contains a hidden message</small>
                                </div>

                                <div class="d-grid gap-2">
                                    <button type="submit" class="btn btn-primary btn-lg">
                                        <i class="bi bi-unlock-fill me-2"></i>Decode Message
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>

                    <!-- Results Section -->
                    @if (!string.IsNullOrEmpty(Model.OperationResult))
                    {
                        <div class="alert @(Model.OperationResult.Contains("Error") ? "alert-danger" : "alert-success") mt-4 d-flex align-items-center">
                            <i class="bi @(Model.OperationResult.Contains("Error") ? "bi-exclamation-triangle" : "bi-check-circle") fs-4 me-3"></i>
                            <div>@Model.OperationResult</div>
                        </div>
                    }

                    <!-- Encoded Image Display -->
                    @if (!string.IsNullOrEmpty(Model.OutputImagePath))
                    {
                        <div class="mt-4 p-4 bg-white rounded shadow-sm">
                            <h4 class="mb-3 d-flex align-items-center">
                                <i class="bi bi-image-fill text-primary me-2"></i>
                                Encoded Image:
                            </h4>
                            <div class="text-center">
                                <div class="position-relative d-inline-block">
                                    <img src="@Model.OutputImagePath" class="img-fluid border rounded shadow-sm mb-3"
                                         style="max-height: 400px;" alt="Encoded image" />
                                    <div class="position-absolute top-0 end-0 m-2">
                                        <span class="badge bg-primary rounded-pill">
                                            <i class="bi bi-lock-fill me-1"></i>
                                            Contains hidden data
                                        </span>
                                    </div>
                                </div>
                                <div class="mt-3">
                                    <a href="@Model.OutputImagePath" download class="btn btn-outline-primary">
                                        <i class="bi bi-download me-2"></i>Download Image
                                    </a>
                                </div>
                            </div>
                        </div>
                    }

                    <!-- Decoded Message Display -->
                    @if (!string.IsNullOrEmpty(Model.DecodedMessage))
                    {
                        <div class="mt-4 border rounded p-4 bg-light">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h4 class="mb-0 d-flex align-items-center">
                                    <i class="bi bi-envelope-open text-primary me-2"></i>
                                    Decoded Message:
                                </h4>
                                <button type="button" id="copyButton" class="btn btn-sm btn-outline-secondary" onclick="copyDecodedMessage()">
                                    <i class="bi bi-clipboard me-1"></i>Copy
                                </button>
                            </div>
                            <div class="p-3 bg-white border rounded shadow-sm">
                                @if (Model.DecodedMessage.Any(c => c == '�'))
                                {
                                    <div class="alert alert-warning mb-3 d-flex align-items-center">
                                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                        <div>
                                            The message contains invalid characters. This may indicate a decoding error or non-text data.
                                        </div>
                                    </div>
                                }
                                <pre id="decodedMessageContent" class="mb-0 text-break" style="white-space: pre-wrap;">@Model.DecodedMessage</pre>
                            </div>
                            <div class="mt-2 text-end">
                                <small class="text-muted">
                                    <i class="bi bi-info-circle me-1"></i>
                                    Message length: @Model.DecodedMessage.Length characters
                                </small>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- How It Works Section -->
            <div class="card shadow mt-4">
                <div class="card-header bg-light d-flex align-items-center">
                    <i class="bi bi-lightbulb text-primary me-2"></i>
                    <h2 class="h4 mb-0">How Image Steganography Works</h2>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-4 mb-md-0">
                            <div class="h5 d-flex align-items-center">
                                <span class="badge bg-primary rounded-pill me-2">1</span>
                                Encoding Process
                            </div>
                            <ol class="ps-3 mt-3">
                                <li class="mb-2">Upload an image file (JPG, PNG, BMP).</li>
                                <li class="mb-2">Enter the text message you want to hide.</li>
                                <li class="mb-2">The system converts your message to binary data.</li>
                                <li class="mb-2">The binary data is embedded in the least significant bits of the image pixels.</li>
                                <li>A new image is generated with your hidden message.</li>
                            </ol>
                        </div>
                        <div class="col-md-6">
                            <div class="h5 d-flex align-items-center">
                                <span class="badge bg-primary rounded-pill me-2">2</span>
                                Decoding Process
                            </div>
                            <ol class="ps-3 mt-3">
                                <li class="mb-2">Upload an image that contains a hidden message.</li>
                                <li class="mb-2">The system extracts the least significant bits from the image pixels.</li>
                                <li class="mb-2">The binary data is reconstructed and converted back to text.</li>
                                <li>The hidden message is revealed and displayed.</li>
                            </ol>
                        </div>
                    </div>
                    <div class="alert alert-info mt-3 mb-0">
                        <div class="d-flex">
                            <div class="me-3">
                                <i class="bi bi-info-circle-fill fs-4"></i>
                            </div>
                            <div>
                                <strong>Did you know?</strong> Steganography has been used throughout history, from ancient Greece to modern digital communications. Unlike encryption, which makes data unreadable, steganography hides the very existence of the secret message.
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Function to handle tab state persistence
        document.addEventListener('DOMContentLoaded', function() {
            // Check if there's a previously selected tab in sessionStorage
            const activeTab = sessionStorage.getItem('steganographyActiveTab');
            if (activeTab) {
                // Activate the stored tab
                const tabToShow = document.querySelector(activeTab);
                if (tabToShow) {
                    const tab = new bootstrap.Tab(tabToShow);
                    tab.show();
                }
            }

            // Save selected tab to sessionStorage when tab is clicked
            const tabEls = document.querySelectorAll('button[data-bs-toggle="tab"]');
            tabEls.forEach(tabEl => {
                tabEl.addEventListener('shown.bs.tab', function(event) {
                    sessionStorage.setItem('steganographyActiveTab', '#' + event.target.id);
                });
            });

            // Character counter for message textarea
            const messageTextarea = document.querySelector('textarea[name="Message"]');
            const messageCounter = document.querySelector('.message-counter');

            if (messageTextarea && messageCounter) {
                messageTextarea.addEventListener('input', function() {
                    const count = this.value.length;
                    messageCounter.textContent = count + ' characters';
                });

                // Initialize counter if message has content
                if (messageTextarea.value.length > 0) {
                    messageCounter.textContent = messageTextarea.value.length + ' characters';
                }
            }
        });

        // Function to copy decoded message to clipboard
        function copyDecodedMessage() {
            const messageText = document.getElementById('decodedMessageContent').textContent;
            const button = document.getElementById('copyButton');

            // Copy to clipboard
            navigator.clipboard.writeText(messageText)
                .then(() => {
                    // Show success message
                    const originalText = button.innerHTML;
                    button.innerHTML = '<i class="bi bi-check-circle me-1"></i>Copied!';
                    button.classList.replace('btn-outline-secondary', 'btn-success');

                    // Reset button after 2 seconds
                    setTimeout(() => {
                        button.innerHTML = originalText;
                        button.classList.replace('btn-success', 'btn-outline-secondary');
                    }, 2000);
                })
                .catch(err => {
                    console.error('Failed to copy text: ', err);
                    alert('Failed to copy text to clipboard');
                });
        }

        // Add professional preview for uploaded images
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('input[type="file"]').forEach(input => {
                // Create preview container
                const previewContainer = document.createElement('div');
                previewContainer.className = 'image-preview mt-3 d-none';
                previewContainer.innerHTML = `
                    <div class="card border-0 bg-light">
                        <div class="card-body p-3 text-center">
                            <div class="image-preview-container position-relative">
                                <img src="" class="img-preview img-fluid rounded shadow-sm" style="max-height: 200px;" alt="Image preview" />
                                <div class="position-absolute top-0 end-0 m-2">
                                    <button type="button" class="btn-close btn-close-white bg-secondary rounded-circle p-2 btn-remove-preview"
                                            aria-label="Remove image"></button>
                                </div>
                            </div>
                            <div class="mt-3 d-flex justify-content-between align-items-center">
                                <div class="text-start">
                                    <h6 class="mb-0 text-truncate file-name" style="max-width: 200px;"></h6>
                                    <small class="text-muted file-info"></small>
                                </div>
                                <div class="image-dimensions text-muted small"></div>
                            </div>
                        </div>
                    </div>
                `;

                // Insert preview container after the input group
                const inputGroup = input.closest('.input-group');
                inputGroup.parentNode.insertBefore(previewContainer, inputGroup.nextSibling);

                // Handle file change event
                input.addEventListener('change', function() {
                    const file = this.files[0];
                    if (file) {
                        // Validate file type
                        const validTypes = ['image/jpeg', 'image/png', 'image/bmp'];
                        if (!validTypes.includes(file.type)) {
                            previewContainer.classList.add('d-none');
                            return;
                        }

                        const reader = new FileReader();
                        reader.onload = function(e) {
                            // Update preview image
                            const imgPreview = previewContainer.querySelector('.img-preview');
                            imgPreview.src = e.target.result;

                            // Update file metadata
                            previewContainer.querySelector('.file-name').textContent = file.name;
                            previewContainer.querySelector('.file-info').textContent =
                                `${file.type.split('/')[1].toUpperCase()} • ${formatFileSize(file.size)}`;

                            // Get and display image dimensions
                            const img = new Image();
                            img.onload = function() {
                                previewContainer.querySelector('.image-dimensions').textContent =
                                    `${this.width} × ${this.height} px`;
                            };
                            img.src = e.target.result;

                            // Show preview
                            previewContainer.classList.remove('d-none');
                        };
                        reader.readAsDataURL(file);
                    } else {
                        previewContainer.classList.add('d-none');
                    }
                });

                // Handle remove button click
                previewContainer.querySelector('.btn-remove-preview').addEventListener('click', function() {
                    input.value = '';
                    previewContainer.classList.add('d-none');
                });
            });

            // Format file size in KB/MB
            function formatFileSize(bytes) {
                if (bytes < 1024 * 1024) {
                    return (bytes / 1024).toFixed(1) + ' KB';
                } else {
                    return (bytes / (1024 * 1024)).toFixed(2) + ' MB';
                }
            }
        });
    </script>
}